-load crispy_forms_tags
-load lesson_tags
-load rating_tags
-load static
-load bootstrap3


%div.container{id: "note{{ resource.id}}", title:"Dismissible popover", data-toggle:"popover", data-trigger:"focus", data-content:"Click anywhere in the document to close this popover"}
  %img{id: "star{{ resource.id}}",src: "https://d30y9cdsu7xlg0.cloudfront.net/png/431-200.png", :style => "width: 2%; height: 2%;",data-toggle:"clickover",data-placement:"top"}
    Note

-if resource.added_by != request.user
  -if resource.id not in rated_resources
    %body{id: "rate"}
      %header.header.text-center
        %link{:href => "{% static 'StarRating.css' %}", :rel => "stylesheet", :type => "text/css"}/
      %section.rating-widget
        #starId.rating-stars.text-center{:float => "left"}
          %ul#stars
            %li.star{:data-value => "1", :title => "Mauvais"}
              %i.fa.fa-star.fa-fw
            %li.star{:data-value => "2", :title => "Passable"}
              %i.fa.fa-star.fa-fw
            %li.star{:data-value => "3", :title => "Satisfaisant"}
              %i.fa.fa-star.fa-fw
            %li.star{:data-value => "4", :title => "Bien"}
              %i.fa.fa-star.fa-fw
            %li.star{:data-value => "5", :title => "Excellent"}
              %i.fa.fa-star.fa-fw
        #Icon{:float => "left", :style => "display in-line"}
          #IconText
            %img{src: "{% static 'img/icons/star1.png' %}", :style => "width: 100%; height: 100%;"}/
          #fillIcon
            %img{src: "{% static 'img/icons/star2.png' %}", :style => "width: 5em; height: 5em;"}/
  -else
    %body
      .content Resource is already rated by you. your vote: {{ rated_resources|get_item:resource.id|get_item:"star" }} on {{ rated_resources|get_item:resource.id|get_item:"rated_on" }}
        total stars: {% get_average_prof resource.id %}
-else
  %body{id: "owner"}
    .content You can't see the rating form. You are Owner of this resource

:javascript
      var json_data;
      var build = false;
      var tot_stars;

      var popupElement = '<div class="btn-group btn-toggle"><button class="btn btn-sm btn-info">On</button><button class="btn btn-sm btn-primary active">Off</button></div>';


      $(document).ready(function(){

        $('[data-toggle="popover"]').popover();

        /* We start by hiding the questionnaire, it becomes visible once the number of starts are selected */
      	var fill = 0;
      	var update = setInterval(function()
      	{
          	fill += 1;
          	$('#fillIcon').css('height', (fill+'%'));
          	//$('#fillIcon').css('margin-top', ((100 - fill)+'%'));
          	if (fill == 60) {
              	clearInterval(update);
          }
      	}, 75);
        $("#buttonSubmit").hide();
      	/* Default value for star rating and responses*/
      	var ratingValue = -1;

        	/* Handles everything when mouse over star rating */
        $('#stars li').on('mouseover', function(){
        var onStar = parseInt($(this).data('value'), 10); // The star currently mouse on

          // Now highlight all the stars that's not after the current hovered star
          $(this).parent().children('li.star').each(function(e){
            if (e < onStar) {
              $(this).addClass('hover');
            }
            else {
              $(this).removeClass('hover');
            }
          });

        	}).on('mouseout', function(){
          	  $(this).parent().children('li.star').each(function(e){
            	$(this).removeClass('hover');
          	  });
        	});

        	/* Handles everything when we click on the stars */
        	$('#stars li').on('click', function(){
        		// We start by showing the questionnaire
        		make_questionnaire();
        		$("#buttonSubmit").show();

          	var onStar = parseInt($(this).data('value'), 10); // The star currently selected
          	var stars = $(this).parent().children('li.star');

          	for (i = 0; i < stars.length; i++) {
            		$(stars[i]).removeClass('selected');
          	}

          	for (i = 0; i < onStar; i++) {
            		$(stars[i]).addClass('selected');
          	}

          	/* ratingValue contains the current value attributed */
          	ratingValue = parseInt($('#stars li.selected').last().data('value'), 10);
          	tot_stars = ratingValue;
        	});

        	$('#Icon').on('mouseover', function(){
        		window.prompt("some text", "default text");
        	});
      });
      function click() {
        console.log(this.id);
      };
      function create_rate(json_s) {
          $.ajax({
              url : "rate/", // the endpoint
              type : "POST", // http method
              data : { json_str: json_s }, // data sent with the post request

              // handle a successful response
              success : function(json_returned) {
                  // Use json to set average for each question
                  console.log("success GET"); // another sanity check
                  show_average(json_returned); // use returned json by server
              },

              // handle a non-successful response
              error : function(xhr,errmsg,err) {
                  $('#results').html("<div class='alert-box alert radius' data-alert>Oops! We have encountered an error: "+errmsg+
                      " <a href='#' class='close'>&times;</a></div>"); // add the error to the dom
                  console.log(xhr.status + ": b" + xhr.responseText); // provide a bit more info about the error to the console
              }
          });
      };
      function make_questionnaire() {
        if (build) {
            return;
        }
        var body = document.getElementsByTagName('section')[0];
        var json_q = "{{ questionnaire|escapejs }}";
        json_data = JSON.parse(json_q);
        if (isEmpty(json_data) || json_data.size() < 1) {
          return;
        }
        var question_data = json_data;

        for (var key in question_data) {
            addQuestion(body,question_data[key],key);
        }
        var but = document.createElement('button');
        but.id = "buttonSubmit";
        but.type = 'submit';
        but.innerHTML = 'Validate';
        but.onclick = function() {  submit(tot_stars);};
        body.appendChild(but);

        build=true;
      };
      function addQuestion(parentElement,array,question_id) {
          // array = [question,answer1,answer_id,answer2,answer_id,...]

          var form = document.createElement('form');
          form.id = question_id;
          parentElement.appendChild(form);
          form.innerHTML= array[0]+'<br>';

          for (i=1;i<array.length;i+=2) {
              var a_id = array[i+1];
              var a = array[i];
              var div = document.createElement('div');

              var input = document.createElement('input');
              input.name = "answer";
              input.type = 'RADIO';
              input.value = a;
              input.id = a_id+"|"+question_id;
              // save id of answer with question because multiple question can have same answer thus answer id

              var label = document.createElement('label');
              label.id = a_id;
              label.for = a_id+"|"+question_id;
              label.innerHTML = a;

              form.appendChild(div);
              div.appendChild(input);
              div.appendChild(label);
          }
      };
      function submit(stars) {
          var obj = new Object(); // will be used to create new json
          var select_cnt=0;
          var question_cnt=0;
          obj['resource_id'] = {{ resource.id }};
          obj['stars'] = stars;
          for (var key in json_data) {
              for (var answer in json_data[key]) {
                  if (answer > 0 && ((answer%2) == 0)) {
                      var s = json_data[key][answer]+"|"+key;
                      selected = document.getElementById(s);
                      if (selected.checked) {
                          // store check boxes with corresponding question_id
                          obj[key] = selected.id.substring(0,selected.id.indexOf("|"));
                          select_cnt+=1
                      }
                  }
              }
              question_cnt+=1;
          }
          if (select_cnt != question_cnt) {
              alert("Please answer all "+question_cnt+" questions");
              console.log(select_cnt+" "+question_cnt);
          } else {
              create_rate(JSON.stringify(obj));
              alert("Thanks for your vote")
          }
      };
      function show_average(json_data) {
          var elem = document.getElementsByName("answer");
          for (i = 0; i < elem.length; i++) {
              var parent = elem[i].parentElement;
              question_id = elem[i].id.substring(elem[i].id.indexOf('|')+1,elem[i].id.length);
              answer_id = elem[i].id.substring(0,elem[i].id.indexOf('|'));
              var b = document.createElement('b');
              b.style = "margin-left:30px;";
              b.innerHTML = "votes: "+ json_data[question_id][answer_id] +" <br>";
              parent.appendChild(b);
              elem[i].disabled = true;
          }
          document.getElementById('buttonSubmit').disabled = true;
          document.getElementById('buttonSubmit').remove();
      };
